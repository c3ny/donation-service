import { Injectable, UnauthorizedException } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';

/**
 * JWT Payload structure from users-service
 * This matches the token generated by the users-service on login
 */
export interface JwtPayload {
  id: string; // User UUID
  email: string; // User email
  personType: 'DONOR' | 'COMPANY'; // User type
  iat?: number; // Issued at timestamp
  exp?: number; // Expiration timestamp
}

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey:
        process.env.JWT_SECRET || 'your-secret-key-change-in-production',
    });
  }

  /**
   * Validates JWT token from users-service
   * Automatically called by Passport after token verification
   */
  validate(payload: JwtPayload) {
    if (!payload.id) {
      throw new UnauthorizedException('Invalid token: missing user id');
    }

    // Return user info that will be attached to request.user
    return {
      userId: payload.id,
      email: payload.email,
      personType: payload.personType,
    };
  }
}
